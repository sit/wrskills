---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import { userProgress } from "../../../store/progress";

export async function getStaticPaths() {
  const topics = await getCollection("topics");
  const problems = await getCollection("problems");
  const difficulties = [
    "iron",
    "bronze",
    "silver",
    "gold",
    "platinum",
    "emerald",
    "diamond",
    "master",
    "grandmaster",
    "challenger",
  ] as const;

  return difficulties.flatMap((difficulty) =>
    topics
      .map((topic) => {
        const topicProblems = problems
          .filter(
            (p) =>
              p.data.difficulty === difficulty &&
              p.data.topics.includes(topic.slug),
          )
          .sort((a, b) => a.data.order - b.data.order);

        if (topicProblems.length === 0) return null;

        return {
          params: { difficulty, topicId: topic.slug },
          props: { topic, problems: topicProblems },
        };
      })
      .filter(Boolean),
  );
}

const { topic, problems } = Astro.props;
const { difficulty } = Astro.params;

// Get current progress
const savedProgress = userProgress.get().topicProgress[topic.slug];
const progress = {
  completed: 0,
  total: problems.length,
  lastAttempt: null,
};

// If we have saved progress and it's not complete, use it
if (savedProgress && savedProgress.completed < problems.length) {
  progress.completed = savedProgress.completed;
}

// Render the first incomplete problem
const currentProblemIndex = Math.min(progress.completed, problems.length - 1);
const currentProblem = problems[currentProblemIndex];
const { Content } = await currentProblem.render();

const isLastProblem = currentProblemIndex === problems.length - 1;
---

<Layout
  title={`${topic.data.title} - ${difficulty.charAt(0).toUpperCase() + difficulty.slice(1)} - Wild Rift Learning`}
>
  <main>
    <nav>
      <a href="/" role="button" class="outline">‚Üê Home</a>
    </nav>

    <header>
      <hgroup>
        <h1>{topic.data.icon} {topic.data.title}</h1>
        <p>
          {difficulty.charAt(0).toUpperCase() + difficulty.slice(1)} Level - Problem
          {currentProblemIndex + 1} of {problems.length}
        </p>
      </hgroup>

      <progress
        class="progress"
        aria-label="Topic Progress"
        value="${(progress.completed / problems.length) * 100}"
        max="100"
      >
      </progress>
    </header>

    <div class="max-w-prose mx-auto p-8 bg-base-100 rounded-xl shadow-sm">
      <Content />
    </div>

    <footer>
      <button
        id="submit-button"
        class="btn"
        data-topic-slug={topic.slug}
        data-problems-length={problems.length}>Submit & Continue</button
      >
    </footer>

    <!-- Completion Modal -->
    <dialog id="completion-modal">
      <article>
        <header>
          <h3>üéâ Topic Complete!</h3>
        </header>
        <p>
          Congratulations! You've completed all problems in {topic.data.title}.
        </p>
        <footer>
          <a href="/" role="button" class="primary">Choose Next Topic</a>
        </footer>
      </article>
    </dialog>
  </main>
</Layout>

<script>
  import { userProgress } from "../../../store/progress";

  const submitButton = document.getElementById("submit-button");
  const completionModal = document.getElementById(
    "completion-modal",
  ) as HTMLDialogElement;
  const topicSlug = submitButton?.dataset.topicSlug;
  const problemsLength = Number(submitButton?.dataset.problemsLength);

  submitButton?.addEventListener("click", () => {
    const progress = userProgress.get();
    if (!topicSlug) return;

    // Update progress
    if (!progress.topicProgress[topicSlug]) {
      progress.topicProgress[topicSlug] = {
        completed: 0,
        total: problemsLength,
        lastAttempt: new Date(),
      };
    }

    progress.topicProgress[topicSlug].completed += 1;
    progress.topicProgress[topicSlug].lastAttempt = new Date();
    userProgress.set(progress);

    // Show completion modal or reload for next problem
    if (progress.topicProgress[topicSlug].completed >= problemsLength) {
      completionModal?.showModal();
    } else {
      window.location.reload();
    }
  });
</script>

<style>
  header {
    margin: 2rem 0;
  }

  footer {
    margin-top: 2rem;
    text-align: center;
  }

  dialog {
    border-radius: 0.75rem;
    border: none;
    padding: 0;
  }

  dialog::backdrop {
    background: rgba(0, 0, 0, 0.5);
  }

  dialog article {
    margin: 0;
    padding: 2rem;
    text-align: center;
  }
</style>
